{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to alt-swing\n\n\nThis documentation is for a Python implementation of the systems engineering trade study framework described in the Systems Engineering Body of Knowledge.  This framework applies to alternative analysis using the swing weight matrix.  \n\n\nThe corresponding IPython notebook can be found on \nGitHub\n.\n\n\nThis implementation follows the systems engineering trade study process outlined on the Systems Engineering Body of Knowledge - Decision Management page.  Please visit the \nSEBoK Wiki\n for a good description of the methodology used.\n\n\nReady to get going?  Check out the \nUser Guide\n.", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-alt-swing", 
            "text": "This documentation is for a Python implementation of the systems engineering trade study framework described in the Systems Engineering Body of Knowledge.  This framework applies to alternative analysis using the swing weight matrix.    The corresponding IPython notebook can be found on  GitHub .  This implementation follows the systems engineering trade study process outlined on the Systems Engineering Body of Knowledge - Decision Management page.  Please visit the  SEBoK Wiki  for a good description of the methodology used.  Ready to get going?  Check out the  User Guide .", 
            "title": "Welcome to alt-swing"
        }, 
        {
            "location": "/user-guide/", 
            "text": "This User Guide steps through the use of the IPython Notebook available on \nGitHub\n, an implementation of a multi-objective decision analysis trade study using the swing weight matrix.\n\n\n\n\nRequirements\n\n\nThe \nAnaconda\n and \nEnthought\n Python distributions should satisfy most requirements, except \nseaborn\n.\n\n\nPython 2.7.x and the following modules:\n\n\n\n\nIPython notebook\n\n\nscipy (0.15.1)\n\n\nnumpy\n\n\npandas (0.16.1)\n\n\nmatplotlib\n\n\nseaborn (0.5.1)\n\n\nmarkdown\n\n\njinja2\n\n\n\n\n\n\nVariables\n\n\nThere are a few variables that allow you to customize your trade study.  This section describes these variables and provides their default values.\n\n\nThe following distribution name strings correspond to the value functions.  These names should correspond to the \nFamily\n identified in \nobjectives.csv\n You can define your own user-defined value function by setting a unique name and name string, and adding the function definition in the code.  Be sure to include this name in the loop of the evaluation step below.\n\n\nsigString = 'sigmoid'\nlinString = 'linear'\npowString = 'power'\ntriString = 'triangular'\n\n\n\nThe value function range \nvfRange\n corresponds to the maximum value that you will use (default is 100.0).  The minimum value is alway 0.0.\n\n\nvfRange = 100.0\n\n\n\nWeights for Importance and Swing are used to calculate the overall MODA weight of each Measure.\n\n\nimpWt = 0.65\nswWt = 1.0 - impWt\n\n\n\nBy default, the program automatically generates an HTML report using the \njinja2\n templating engine with markdown syntax text documents.\n\n\nhtmlReport = True\n\n\n\nIf \nFalse\n, no HTML report will be generated.  Further details are in the \nHTML Report\n section.\n\n\n\n\nStructuring Input\n\n\nThere are two input files: \nobjectives.csv\n and \nalternatives.csv\n.  Both of these files are contained in the \ninput\n folder.  Follow the recommended naming conventions to avoid refactoring the code.\n\n\nThe input files are contained in the \ninput\n folder:\n\n\n- alt-swing\n    alt-swing.ipynb\n    - input\n        - alternatives.csv\n        - objectives.csv\n\n\n\nObjectives and Measures\n\n\nThe \nobjectives.csv\n file expects the following columns and indices:\n\n\n\n\nObjective [string]: the objective corresponding to this row (index column) \n\n\nMeasure [string]: the measure corresponding to this row (index column) \n\n\nImportance [float]:  the relative importance to the decision being assessed\n\n\nMinimum [float]: the minimum score for this Measure\n\n\nMaximum [float]: the maximum score for this Measure\n\n\nIdeal [float]: the ideal value for this measure\n\n\nUnits [string]: the units of this measure (kg, m3, km/h, index, ...)\n\n\nFamily [float]: the value function family for this measure; see \nValue Functions\n\n\nSlope [float]: +1 for an increasing function, -1 for decreasing\n\n\nParam1, Param2, Param3 [floats]: value function parameters; see \nValue Functions\n\n\n\n\nHere is an example format:\n\n\nObjective,Measure,Importance,Minimum,Maximum,Ideal,Units,Family,Slope,Param1,Param2,Param3\nObj1,Measure 1,35,5,50,5,lbs,sigmoid,-1,0.3,27.5,\nObj1,Measure 2,45,10,65,10,ft3,linear,-1,,,\nObj2,Measure 3,35,5,50,5,lbs,sigmoid,-1,0.3,27.5,\n\n\n\nAlternatives\n\n\nThe \nalternatives.csv\n file expects the following columns and indices:\n\n\n\n\nAlternative [string]: the name of the alternative (index column) \n\n\nObjective [string]: name of the corresponding objective; the string should match an objective in \nobjectives.csv\n (index column) \n\n\nMeasure [float]: name of the corresponding measure; the string should match a measure in \nobjectives.csv\n (index column) \n\n\nValue: the score of the alternative on this Objective/Measure; e.g. weight is 5 kg, maximum speed is 230 km/h, etc.\n\n\nUnits [string]: the units associated with Value .  Note: \nno unit conversion takes place\n; these units should be identical to the Units defined in \nobjectives.csv\n for the corresponding Measure.\n\n\n\n\nHere is an example format:\n\n\nAlternative,Objective,Measure,Value,Units\nCardinal,Relocate UAV,Minimize UAV weight,5,lbs\nCardinal,Relocate UAV,Minimize UAV volume,12,ft3\nCardinal,Employ UAV,Maximize all weather capability,3,index\n\n\n\n\n\nEvaluating Alternatives\n\n\nEach alternative is evaluated against all measures in the Objectives Hierarchy defined for the alternative.  The MODA weight is calculated using both the decision importance and the swing, or range, of alternative values of the measure.\n\n\nValue Functions \n\n\nValue functions describe the value or utility that each alternative has with regard to the overall decision.  For all functions, x is the Score derived from the Alternative and Measure in \nalternatives.csv\n.  The following value functions are defined by default:\n\n\nLinear Function\n\n\nThe linear function simply scales an input.\n\n\ndef scale(x, xMin, xMax):\n    \n Returns the scaled value between [0.0, 1.0] evaluated at x \n    from original domain of [xMin, xMax]. \n\n    return (x - xMin) / (xMax - xMin)\n\n\n\n\nxMin\n : objectives.Minimum, \nxMax\n : objectives.Maximum; (Minimum and Maximum defined in \nobjectives.csv\n).\n\n\nBell Function\n\n\ndef bell(x, a, b, c):\n    \n Returns the [0,vfRange] scaled generalized bell curve \n    evaluated at x for (c)enter and shape parameters a and b.\n\n    return vfRange * 1.0 / (1.0 + pow(np.abs((x - c)/a), (2.0*b)))\n\n\n\n\nc\n : Param1, \na\n : Param2, \nb\n : Param3\n\n\nSigmoid Function\n\n\ndef sigmoid(x, a, c):\n    \nReturns the [0,vfRange] scaled sigmoid function evaluated \n    at x for (a)lpha and (c)enter.\n\n    return vfRange * (1.0 / (1.0 + np.exp(-1.0 * a * (x - c))))\n\n\n\n\na\n : Param1, \nc\n : Param2, Param3 is unused\n\n\nTriangular Function\n\n\ndef triangular(x, l, c, r):\n    \n Returns the [0,100] scaled triangular value function evaluated \n    at x for (l)eft, (c)enter, (r)ight triangular parameters.\n\n    return vfRange * max(min(((x - l)/(c - l)), ((r - x)/(r - c))), 0.0)\n\n\n\n\nl\n : objectives.Minimum, \nr\n : objectives.Maximum, \nc\n : objectives.Ideal; Minimum, Maximum and Ideal are defined in \nobjectives.csv\n.\n\n\n\n\nHere is an example value function for a single measure.\n\n\n\n\n\n\n\n\n\n\n\nCalculating Weights\n\n\nThe overall value of each alternative depends on the swing weight, which is calculated as a function of the degree of importance and the range of alternative value.(refer to the SEBoK Wiki page on \nDecision Management\n for more information).  The evaluation of each alternative is done using built-in \nnumpy\n or \npandas\n functions and transformations.  See the \nscipy\n or \npandas\n documentation for more information.  The logic for this evaluation is as follows:\n\n\nThe evaluation operation loops through all rows of the alternatives DataFrame defined from \nalternatives.csv\n, and evaluates the alternative for the corresponding Objective and Measure, which are index columns of the objectives DataFrame.  The parameters for these dictate the function family, minimum, maximum and other parameters of the value function.  The resulting score, or unweighted value, is stored in the alternatives DataFrame.  The loop ends after the last row of the alternatives DataFrame has been evaluated.\n\n\nCalculating Swing Weights\n\n\nCalculated as the range (max - min) of all alternative value scores, then normalized.  Refer to the \nSEBoK Wiki\n for more details.\n\n\nCalculating MODA Weight\n\n\nA combination of Measure's \nImportance\n and \nSwing\n weights using the variables \nimpWt\n and \nswWt\n defined above.  Refer to the \nSEBoK Wiki\n for more details.\n\n\nGenerating the Alternative Value Matrix\n\n\nThe MODA results are used to compare alternative performance against the objectives and measures.\n\n\nUses \nseaborn\n's \nheatmap\n function.  Here is an example heatmap that gets generated.\n\n\n\n\n\n\nGenerating Reports \n\n\nStandalone HTML reports are generated automatically using the \njinja2\n templating engine and \nmarkdown\n Python module.  The directory structure for this environment is:\n\n\n- alt-swing\n    - templates\n        - content\n            - alternatives-section.md\n            - obj_measures-section.md\n            - xxx-section.md\n        - alt-swing_template.html\n    - html_report\n        - css\n            - ...\n        - images\n        - report.html\n\n\n\nThe \ntemplates\n folder contains the input necessary to generate the report.  This includes the \nalt-swing_template.html\n \njinja2\n HTML template.  The \ncontent\n subfolder includes markdown documents where you can place your desired report content.  You can modify the template to add new content sections as you need, but it will require modifying the \nalt-swing\n content as well, since there are direct pointers to the specific files above.  These files are converted to HTML using the \nmarkdown\n module.\n\n\nThe \nhtml_report\n folder contains (you guessed it!) the generated report.  Open the \nreport.html\n file in a browser to view the results.  The default \nalt-swing\n report template includes transformed versions of the alternatives and objectives and measures DataFrames, along with a few selected figures.\n\n\nCreating the Report in Other Formats\n\n\nOnce you have the HTML report, consider using \npandoc\n, free software that can convert to other formats, including MS Word and PDF (via LaTeX).\n\n\nTo do\n\n\nPlease see the \nalt-swing GitHub\n page for information on future updates.", 
            "title": "User Guide"
        }, 
        {
            "location": "/user-guide/#requirements", 
            "text": "The  Anaconda  and  Enthought  Python distributions should satisfy most requirements, except  seaborn .  Python 2.7.x and the following modules:   IPython notebook  scipy (0.15.1)  numpy  pandas (0.16.1)  matplotlib  seaborn (0.5.1)  markdown  jinja2", 
            "title": "Requirements"
        }, 
        {
            "location": "/user-guide/#variables", 
            "text": "There are a few variables that allow you to customize your trade study.  This section describes these variables and provides their default values.  The following distribution name strings correspond to the value functions.  These names should correspond to the  Family  identified in  objectives.csv  You can define your own user-defined value function by setting a unique name and name string, and adding the function definition in the code.  Be sure to include this name in the loop of the evaluation step below.  sigString = 'sigmoid'\nlinString = 'linear'\npowString = 'power'\ntriString = 'triangular'  The value function range  vfRange  corresponds to the maximum value that you will use (default is 100.0).  The minimum value is alway 0.0.  vfRange = 100.0  Weights for Importance and Swing are used to calculate the overall MODA weight of each Measure.  impWt = 0.65\nswWt = 1.0 - impWt  By default, the program automatically generates an HTML report using the  jinja2  templating engine with markdown syntax text documents.  htmlReport = True  If  False , no HTML report will be generated.  Further details are in the  HTML Report  section.", 
            "title": "Variables"
        }, 
        {
            "location": "/user-guide/#structuring-input", 
            "text": "There are two input files:  objectives.csv  and  alternatives.csv .  Both of these files are contained in the  input  folder.  Follow the recommended naming conventions to avoid refactoring the code.  The input files are contained in the  input  folder:  - alt-swing\n    alt-swing.ipynb\n    - input\n        - alternatives.csv\n        - objectives.csv  Objectives and Measures  The  objectives.csv  file expects the following columns and indices:   Objective [string]: the objective corresponding to this row (index column)   Measure [string]: the measure corresponding to this row (index column)   Importance [float]:  the relative importance to the decision being assessed  Minimum [float]: the minimum score for this Measure  Maximum [float]: the maximum score for this Measure  Ideal [float]: the ideal value for this measure  Units [string]: the units of this measure (kg, m3, km/h, index, ...)  Family [float]: the value function family for this measure; see  Value Functions  Slope [float]: +1 for an increasing function, -1 for decreasing  Param1, Param2, Param3 [floats]: value function parameters; see  Value Functions   Here is an example format:  Objective,Measure,Importance,Minimum,Maximum,Ideal,Units,Family,Slope,Param1,Param2,Param3\nObj1,Measure 1,35,5,50,5,lbs,sigmoid,-1,0.3,27.5,\nObj1,Measure 2,45,10,65,10,ft3,linear,-1,,,\nObj2,Measure 3,35,5,50,5,lbs,sigmoid,-1,0.3,27.5,  Alternatives  The  alternatives.csv  file expects the following columns and indices:   Alternative [string]: the name of the alternative (index column)   Objective [string]: name of the corresponding objective; the string should match an objective in  objectives.csv  (index column)   Measure [float]: name of the corresponding measure; the string should match a measure in  objectives.csv  (index column)   Value: the score of the alternative on this Objective/Measure; e.g. weight is 5 kg, maximum speed is 230 km/h, etc.  Units [string]: the units associated with Value .  Note:  no unit conversion takes place ; these units should be identical to the Units defined in  objectives.csv  for the corresponding Measure.   Here is an example format:  Alternative,Objective,Measure,Value,Units\nCardinal,Relocate UAV,Minimize UAV weight,5,lbs\nCardinal,Relocate UAV,Minimize UAV volume,12,ft3\nCardinal,Employ UAV,Maximize all weather capability,3,index", 
            "title": "Structuring Input"
        }, 
        {
            "location": "/user-guide/#evaluating-alternatives", 
            "text": "Each alternative is evaluated against all measures in the Objectives Hierarchy defined for the alternative.  The MODA weight is calculated using both the decision importance and the swing, or range, of alternative values of the measure.  Value Functions   Value functions describe the value or utility that each alternative has with regard to the overall decision.  For all functions, x is the Score derived from the Alternative and Measure in  alternatives.csv .  The following value functions are defined by default:  Linear Function  The linear function simply scales an input.  def scale(x, xMin, xMax):\n      Returns the scaled value between [0.0, 1.0] evaluated at x \n    from original domain of [xMin, xMax].  \n    return (x - xMin) / (xMax - xMin)  xMin  : objectives.Minimum,  xMax  : objectives.Maximum; (Minimum and Maximum defined in  objectives.csv ).  Bell Function  def bell(x, a, b, c):\n      Returns the [0,vfRange] scaled generalized bell curve \n    evaluated at x for (c)enter and shape parameters a and b. \n    return vfRange * 1.0 / (1.0 + pow(np.abs((x - c)/a), (2.0*b)))  c  : Param1,  a  : Param2,  b  : Param3  Sigmoid Function  def sigmoid(x, a, c):\n     Returns the [0,vfRange] scaled sigmoid function evaluated \n    at x for (a)lpha and (c)enter. \n    return vfRange * (1.0 / (1.0 + np.exp(-1.0 * a * (x - c))))  a  : Param1,  c  : Param2, Param3 is unused  Triangular Function  def triangular(x, l, c, r):\n      Returns the [0,100] scaled triangular value function evaluated \n    at x for (l)eft, (c)enter, (r)ight triangular parameters. \n    return vfRange * max(min(((x - l)/(c - l)), ((r - x)/(r - c))), 0.0)  l  : objectives.Minimum,  r  : objectives.Maximum,  c  : objectives.Ideal; Minimum, Maximum and Ideal are defined in  objectives.csv .   Here is an example value function for a single measure.", 
            "title": "Evaluating Alternatives"
        }, 
        {
            "location": "/user-guide/#calculating-weights", 
            "text": "The overall value of each alternative depends on the swing weight, which is calculated as a function of the degree of importance and the range of alternative value.(refer to the SEBoK Wiki page on  Decision Management  for more information).  The evaluation of each alternative is done using built-in  numpy  or  pandas  functions and transformations.  See the  scipy  or  pandas  documentation for more information.  The logic for this evaluation is as follows:  The evaluation operation loops through all rows of the alternatives DataFrame defined from  alternatives.csv , and evaluates the alternative for the corresponding Objective and Measure, which are index columns of the objectives DataFrame.  The parameters for these dictate the function family, minimum, maximum and other parameters of the value function.  The resulting score, or unweighted value, is stored in the alternatives DataFrame.  The loop ends after the last row of the alternatives DataFrame has been evaluated.  Calculating Swing Weights  Calculated as the range (max - min) of all alternative value scores, then normalized.  Refer to the  SEBoK Wiki  for more details.  Calculating MODA Weight  A combination of Measure's  Importance  and  Swing  weights using the variables  impWt  and  swWt  defined above.  Refer to the  SEBoK Wiki  for more details.  Generating the Alternative Value Matrix  The MODA results are used to compare alternative performance against the objectives and measures.  Uses  seaborn 's  heatmap  function.  Here is an example heatmap that gets generated.", 
            "title": "Calculating Weights"
        }, 
        {
            "location": "/user-guide/#generating-reports", 
            "text": "Standalone HTML reports are generated automatically using the  jinja2  templating engine and  markdown  Python module.  The directory structure for this environment is:  - alt-swing\n    - templates\n        - content\n            - alternatives-section.md\n            - obj_measures-section.md\n            - xxx-section.md\n        - alt-swing_template.html\n    - html_report\n        - css\n            - ...\n        - images\n        - report.html  The  templates  folder contains the input necessary to generate the report.  This includes the  alt-swing_template.html   jinja2  HTML template.  The  content  subfolder includes markdown documents where you can place your desired report content.  You can modify the template to add new content sections as you need, but it will require modifying the  alt-swing  content as well, since there are direct pointers to the specific files above.  These files are converted to HTML using the  markdown  module.  The  html_report  folder contains (you guessed it!) the generated report.  Open the  report.html  file in a browser to view the results.  The default  alt-swing  report template includes transformed versions of the alternatives and objectives and measures DataFrames, along with a few selected figures.  Creating the Report in Other Formats  Once you have the HTML report, consider using  pandoc , free software that can convert to other formats, including MS Word and PDF (via LaTeX).", 
            "title": "Generating Reports "
        }, 
        {
            "location": "/user-guide/#to-do", 
            "text": "Please see the  alt-swing GitHub  page for information on future updates.", 
            "title": "To do"
        }
    ]
}